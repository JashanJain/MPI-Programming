##Question 1
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define NUM_SAMPLES 1000000
int main(int argc, char** argv) {
    int rank, size;
    long long local_count = 0, total_count = 0;
    double x, y;
    unsigned int seed;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); 
    MPI_Comm_size(MPI_COMM_WORLD, &size);  
    seed = time(NULL) + rank;

    for (long long i = 0; i < NUM_SAMPLES; i++) {
        x = (double)rand_r(&seed) / RAND_MAX;  // Random x in [0,1]
        y = (double)rand_r(&seed) / RAND_MAX;  // Random y in [0,1]

        if (x * x + y * y <= 1.0) {
            local_count++;  // Point inside the quarter-circle
        }
    }
    MPI_Reduce(&local_count, &total_count, 1, MPI_LONG_LONG, MPI_SUM, 0, MPI_COMM_WORLD);
    if (rank == 0) { 
        double pi_estimate = (4.0 * total_count) / (NUM_SAMPLES * size);
        printf("Estimated Pi value: %lf\n", pi_estimate);
    }

    MPI_Finalize();
    return 0;
}




##Question 2
#include <mpi.h>
#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
#define N 70  

void initialize_matrix(double matrix[N][N]) {
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            matrix[i][j] = rand() % 10;  // Random values from 0 to 9
}

void serial_matrix_multiply(double A[N][N], double B[N][N], double C[N][N]) {
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++) {
            C[i][j] = 0;
            for (int k = 0; k < N; k++)
                C[i][j] += A[i][k] * B[k][j];
        }
}

void mpi_matrix_multiply(double A[N][N], double B[N][N], double C[N][N], int rank, int size) {
    int rows_per_process = N / size;  // Divide rows among processes
    int start_row = rank * rows_per_process;
    int end_row = (rank == size - 1) ? N : start_row + rows_per_process;

    for (int i = start_row; i < end_row; i++)
        for (int j = 0; j < N; j++) {
            C[i][j] = 0;
            for (int k = 0; k < N; k++)
                C[i][j] += A[i][k] * B[k][j];
        }

    MPI_Gather(C[start_row], rows_per_process * N, MPI_DOUBLE, C, rows_per_process * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);
}

int main(int argc, char** argv) {
    int rank, size;
    double A[N][N], B[N][N], C_serial[N][N], C_parallel[N][N];
    double start_time, serial_time, parallel_time;

    MPI_Init(&argc, &argv);  
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);  
    MPI_Comm_size(MPI_COMM_WORLD, &size);  

    if (rank == 0) {
        srand(42);  
        initialize_matrix(A);
        initialize_matrix(B);

        start_time = omp_get_wtime();
        serial_matrix_multiply(A, B, C_serial);
        serial_time = omp_get_wtime() - start_time;
        printf("Serial Execution Time: %f seconds\n", serial_time);
    }

    MPI_Bcast(A, N * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);
    MPI_Bcast(B, N * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    start_time = omp_get_wtime();
    mpi_matrix_multiply(A, B, C_parallel, rank, size);
    parallel_time = omp_get_wtime() - start_time;

    if (rank == 0) {
        printf("Parallel Execution Time: %f seconds\n", parallel_time);
        printf("Speedup: %f\n", serial_time / parallel_time);
    }

    MPI_Finalize();
    return 0;
}




##Question 3
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#define N 10  // Array size

void odd_even_sort(int *arr, int n, int rank, int size) {
    for (int phase = 0; phase < n; phase++) {
        int partner = (phase % 2 == 0) ? rank ^ 1 : rank ^ 0;
        if (partner >= 0 && partner < size) {
            int recv;
            MPI_Sendrecv(&arr[rank], 1, MPI_INT, partner, 0, &recv, 1, MPI_INT, partner, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            if ((rank < partner && arr[rank] > recv) || (rank > partner && arr[rank] < recv)) {
                arr[rank] = recv;
            }
        }
    }
}

int main(int argc, char *argv[]) {
    int rank, size, arr[N];

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    srand(rank);
    arr[rank] = rand() % 100;
    odd_even_sort(arr, N, rank, size);

    MPI_Finalize();
    return 0;
}




##Question 4 
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define N 10  // Grid size (NxN)
#define ITERATIONS 1000  // Number of iterations
#define TOLERANCE 0.0001 // Convergence tolerance
void initialize_grid(double grid[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (i == 0 || i == N - 1 || j == 0 || j == N - 1)
                grid[i][j] = 100.0;  // Set boundary temperatures
            else
                grid[i][j] = 0.0;  // Interior points start at 0
        }
    }
}

void print_grid(double grid[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf("%.2f ", grid[i][j]);
        printf("\n");
    }
}

int main(int argc, char** argv) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int rows_per_proc = N / size; 
    double grid[N][N], new_grid[N][N];

    if (rank == 0) {
        initialize_grid(grid);
    }

    MPI_Bcast(grid, N * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    int start_row = rank * rows_per_proc;
    int end_row = (rank == size - 1) ? N - 1 : start_row + rows_per_proc;

    double start_time = MPI_Wtime();

    for (int iter = 0; iter < ITERATIONS; iter++) {
        for (int i = start_row; i < end_row; i++) {
            for (int j = 1; j < N - 1; j++) {  
                new_grid[i][j] = 0.25 * (grid[i - 1][j] + grid[i + 1][j] + 
                                         grid[i][j - 1] + grid[i][j + 1]);
            }
        }
        if (rank > 0)
            MPI_Sendrecv(&new_grid[start_row][0], N, MPI_DOUBLE, rank - 1, 0,
                         &new_grid[start_row - 1][0], N, MPI_DOUBLE, rank - 1, 0,
                         MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        if (rank < size - 1)
            MPI_Sendrecv(&new_grid[end_row - 1][0], N, MPI_DOUBLE, rank + 1, 0,
                         &new_grid[end_row][0], N, MPI_DOUBLE, rank + 1, 0,
                         MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        for (int i = start_row; i < end_row; i++)
            for (int j = 0; j < N; j++)
                grid[i][j] = new_grid[i][j];
    }

    double end_time = MPI_Wtime();
    if (rank == 0) {
        printf("Final Heat Distribution:\n");
        print_grid(grid);
        printf("Execution Time: %f seconds\n", end_time - start_time);
    }
    MPI_Finalize();
    return 0;
}




##Question 5
#include <mpi.h>
#include <stdio.h>

int main(int argc, char* argv[]) {
    int rank, size, value, result;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    value = rank + 1; 
    MPI_Reduce(&value, &result, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    if (rank == 0) printf("Sum of all ranks = %d\n", result);
    MPI_Finalize();
    return 0;
}




##Question 6
#include <mpi.h>
#include <stdio.h>

#define N 100

int main(int argc, char* argv[]) {
    int rank, size;
    double local_sum = 0, global_sum = 0;
    double A[N], B[N];

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int elements_per_proc = N / size;
    for (int i = 0; i < elements_per_proc; i++) {
        A[i] = 1.0;  // Example values
        B[i] = 1.0;
        local_sum += A[i] * B[i];
    }

    MPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
    if (rank == 0) printf("Dot Product = %lf\n", global_sum);

    MPI_Finalize();
    return 0;
}




##Question 7
#include <mpi.h>
#include <stdio.h>

#define N 8

int main(int argc, char* argv[]) {
    int rank, size, arr[N], prefix_sum = 0;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    arr[rank] = rank + 1;
    MPI_Scan(&arr[rank], &prefix_sum, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);

    printf("Rank %d: Prefix sum = %d\n", rank, prefix_sum);

    MPI_Finalize();
    return 0;
}




##Question 8
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#define N 6 

void initialize_matrix(int matrix[N][N]) {
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            matrix[i][j] = i * N + j; 
}

void print_matrix(int matrix[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf("%3d ", matrix[i][j]);
        printf("\n");
    }
}

void local_transpose(int local_matrix[][N], int rows_per_proc) {
    for (int i = 0; i < rows_per_proc; i++)
        for (int j = i + 1; j < N; j++) {
            int temp = local_matrix[i][j];
            local_matrix[i][j] = local_matrix[j][i];
            local_matrix[j][i] = temp;
        }
}

int main(int argc, char** argv) {
    int rank, size;
    int matrix[N][N], transposed[N][N];  
    int local_matrix[N][N]; 
    int rows_per_proc;  

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    rows_per_proc = N / size; 
    if (rank == 0) {
        initialize_matrix(matrix);
        printf("Original Matrix:\n");
        print_matrix(matrix);
    }
    MPI_Scatter(matrix, rows_per_proc * N, MPI_INT, local_matrix, rows_per_proc * N, MPI_INT, 0, MPI_COMM_WORLD);

    local_transpose(local_matrix, rows_per_proc);

    MPI_Gather(local_matrix, rows_per_proc * N, MPI_INT, transposed, rows_per_proc * N, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("\nTransposed Matrix:\n");
        print_matrix(transposed);
    }

    MPI_Finalize();
    return 0;
}
