##Sending and receiving with MPI_Send and MPI_Recv
#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    int rank, size, data;
    MPI_Init(&argc, &argv);              
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size < 2) {
        printf("Run with at least two processes.\n");
        MPI_Finalize();
        return 1;
    }

    if (rank == 0) {  
        data = 42;  
        printf("Process %d sending %d to process 1\n", rank, data);
        MPI_Send(&data, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);
    } else if (rank == 1) {  
        MPI_Status status;
        MPI_Recv(&data, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);
        printf("Process %d received %d from process 0\n", rank, data);
    }

    MPI_Finalize();
    return 0;
}





##Dynamic receiving with MPI_Probe and MPI_Status
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size < 2) {
        printf("Run with at least two processes.\n");
        MPI_Finalize();
        return 1;
    }

    if (rank == 0) {  
        
        int data1[] = {10, 20, 30};     
        int data2[] = {100, 200, 300, 400, 500};  

        MPI_Send(data1, 3, MPI_INT, 1, 0, MPI_COMM_WORLD);
        MPI_Send(data2, 5, MPI_INT, 1, 1, MPI_COMM_WORLD);

        printf("Process 0 sent two messages of different sizes.\n");

    } else if (rank == 1) {  
        
        for (int i = 0; i < 2; i++) {
            MPI_Status status;
            int count;

            
            MPI_Probe(MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status);
            
            MPI_Get_count(&status, MPI_INT, &count);
            
            int *buffer = (int*) malloc(count * sizeof(int));

            MPI_Recv(buffer, count, MPI_INT, status.MPI_SOURCE, status.MPI_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

            printf("Process 1 received %d elements: ", count);
            for (int j = 0; j < count; j++)
                printf("%d ", buffer[j]);
            printf("\n");

            free(buffer); 
        }
    }

    MPI_Finalize();
    return 0;
}





##Point-to-point communication application - Random walking
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_STEPS 10 

int main(int argc, char** argv) {
    int rank, size, walker, steps = 0;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    srand(time(NULL) + rank);  

    if (rank == 0) {
        walker = rand() % size;  
        printf("Master starts walker at process %d\n", walker);
        MPI_Send(&steps, 1, MPI_INT, walker, 0, MPI_COMM_WORLD);  
    }

    while (steps < MAX_STEPS) {
        MPI_Status status;
        MPI_Recv(&steps, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, &status);

        printf("Walker at process %d, step %d\n", rank, steps);

        if (steps >= MAX_STEPS) {
            printf("Walker stops at process %d after %d steps.\n", rank, steps);
            break;  
        }

        steps++;  
        int next_process;
        do {
            next_process = rand() % size;
        } while (next_process == rank);

        MPI_Send(&steps, 1, MPI_INT, next_process, 0, MPI_COMM_WORLD);
    }

    MPI_Barrier(MPI_COMM_WORLD);  
    MPI_Finalize();
    return 0;
}
